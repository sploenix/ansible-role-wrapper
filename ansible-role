#!/usr/bin/env python3

import sys
import os
from sh import ansible_galaxy, grep, sed
import pty
from argparse import ArgumentParser


parser = ArgumentParser(description="Run ansible role in collection")
parser.add_argument("fqcn",
                    help="Fully qualified collection name (namespace.collection.role)")
parser.add_argument("ansible_args",
                    help="Arguments for ansible-playbook",
                    nargs="*",
                    type=str)
parser.add_argument('--debug',
                    default=False,
                    action='store_true')

# Ansible args are not parsed correctly by argparse
# so we need to replace parameter starting with - and -- with DELMINUS
i = 0
for i in range(len(sys.argv[2:])):
    arg = sys.argv[i+2]
    if arg[0] == "-":
        if arg[1] == "-":
            sys.argv[i+2] = sys.argv[i+2][0] + 'DELMINUS' + sys.argv[i+2][2:]
        sys.argv[i+2] = 'DELMINUS' + sys.argv[i+2][1:]
    i+=1

# parse arguments
args = parser.parse_args()

# replace DELMINUS with -
i = 0
for i in range(len(args.ansible_args)):
    args.ansible_args[i] = args.ansible_args[i].replace("DELMINUS", "-")
    i+=1

def get_collection_dir(namespace_collection):
    if not ansible_galaxy("collection", "list", f"{namespace_collection}"):
        print(f"Collection {namespace_collection} not found - exit!")
        exit(1)
    else:
        collection_basedir = sed(grep(ansible_galaxy("collection", "list", f"{namespace_collection}"), "# /"), "s/# //")
    collection_basedir = collection_basedir.replace("\n", "")
    collection_dir = f'{collection_basedir}/{namespace_collection.replace(".", "/")}'
    return collection_dir

def parse_ansible_fqcn():
    # check fqcn syntax
    fqcn = args.fqcn
    if fqcn.count(".") != 2:
        print("Invalid ansible role syntax - exit!")
        print(f'{fqcn} != namespace.collection.role')
        exit(1)

    # split namespace.collection from fqcn
    namespace_collection = ".".join(fqcn.split(".")[0:2])
    role_name = fqcn.split(".")[2]

    # get local directory for collection
    collection_dir = get_collection_dir(namespace_collection)


    if args.debug:
        print(f"Found collection: {collection_dir}")

    # check if collection contains role
    if not os.path.isdir(f"{collection_dir}/roles/{role_name}"):
        print(f"Collection {namespace_collection} does not contain role {role_name} - exit!")
        exit(1)


    if args.debug:
        print(f"Found role {collection_dir}/roles/{role_name}")


def gen_temp_playbook(fqcn):
    tmp_playbook = f"/tmp/ansible-role-playbook_{fqcn}.yml"
    with open(tmp_playbook, "w") as f:
        f.write("---\n")
        f.write("- name: temporary playbook for role {fqcn} generated by ansible-role wrapper\n")
        f.write("  hosts: all\n")
        f.write("  roles:\n")
        f.write(f"    - {fqcn}\n")

    if args.debug:
        print(f"Generated temporary playbook /tmp/ansible-role-playbook_{fqcn}.yml")
    return f"/tmp/ansible-role-playbook_{fqcn}.yml"


def main():
    parse_ansible_fqcn()

    # generate temporary playbook
    playbook = gen_temp_playbook(args.fqcn)
    playbook_args = " ".join(args.ansible_args)

    if args.debug:
        print(f'Run "ansible-playbook {playbook} {playbook_args}"')

    # run ansible-playbook in pty (to get colours and live output)
    def read(fd):
        data = os.read(fd, 1024)
        return data
    cmd = ["ansible-playbook", playbook] + args.ansible_args
    pty.spawn(cmd, read)

    # remove temporary playbook
    if args.debug:
        print(f"Remove temporary playbook /tmp/ansible-role-playbook_{args.fqcn}.yml")

    os.remove(playbook)
    return 0


if __name__ == "__main__":
    sys.exit(main())
